**************************************
*************** TASK 1 ***************
**************************************

// Sufiyaan Usmani

#include <iostream>
#define TABLE_SIZE 128
using namespace std;

class HashEntry{
    public:
        int key;
        int data;

        HashEntry(int key, int data){
            this->key = key;
            this->data = data;
        }
};

class HashTable{
    private:
        HashEntry **table;
    public:
        HashTable(){
            table = new HashEntry*[TABLE_SIZE];
            for(int i=0;i<TABLE_SIZE;i++){
                table[i] = NULL;
            }
        }

        int hashFunction(int key){
            return(key % TABLE_SIZE);
        }

        void insert(int key, int data){
            int hash = hashFunction(key);
            while(table[hash] != NULL && table[hash]->key != key){
                hash = hashFunction(hash + 1);
            }
            if(table[hash] != NULL){
                delete table[hash];
            }
            table[hash] = new HashEntry(key, data);
            cout << data << " inserted at key: " << hash << endl;
        }

        int search(int key){
            int hash = hashFunction(key);
            while(table[hash] != NULL && table[hash]->key != key){
                hash = hashFunction(hash + 1);
            }

            if(table[hash] == NULL){
                return -1;
            }else{
                return table[hash]->data;
            }
        }

        void remove(int key){
            int hash = hashFunction(key);
            while(table[hash] != NULL){
                if(table[hash]->key == key){
                    break;
                }
                hash = hashFunction(hash + 1);
            }
            if(table[hash] == NULL){
                cout << "Element not found" << endl;
            }else{
                delete table[hash];
                table[hash] = NULL;
                cout << "Element Deleted from key: " << hash << endl;
            }
        }

        ~HashTable(){
            for(int i=0;i<TABLE_SIZE;i++){
                delete table[i];
            }
            delete[] table;
            table = NULL;
        }
};

int main(){
    HashTable table;
    table.insert(2, 20);
    table.insert(130, 30);
    table.insert(5, 30);
    table.insert(5, 40);
    table.remove(130);
    table.remove(5);
    return 0;
}

**************************************
************* TASK 2(a) **************
**************************************

// Sufiyaan Usmani

#include <iostream>
#define TABLE_SIZE 100
using namespace std;

class HashEntry{
    public:
        int key;
        int data;

        HashEntry(int key, int data){
            this->key = key;
            this->data = data;
        }
};

class HashTable{
    private:
        HashEntry **table;
    public:
        HashTable(){
            table = new HashEntry*[TABLE_SIZE];
            for(int i=0;i<TABLE_SIZE;i++){
                table[i] = NULL;
            }
        }

        int divisionHash(int key){
            return(key % 20);
        }

        void insert(int key, int data){
            int hash = divisionHash(key);
            while(table[hash] != NULL && table[hash]->key != key){
                hash = divisionHash(hash + 1);
            }
            if(table[hash] != NULL){
                delete table[hash];
            }
            table[hash] = new HashEntry(key, data);
            cout << "Element inserted at table index: " << hash << endl;
        }

        int search(int key){
            int hash = divisionHash(key);
            while(table[hash] != NULL && table[hash]->key != key){
                hash = divisionHash(hash + 1);
            }
            
            if(table[hash] == NULL){
                return -1;
            }else{
                return table[hash]->data;
            }
        }

        void remove(int key){
            int hash = divisionHash(key);
            while(table[hash] != NULL){
                if(table[hash]->key == key){
                    break;
                }
                hash = divisionHash(hash + 1);
            }

            if(table[hash] == NULL){
                cout << "Element not found" << endl;
            }else{
                delete table[hash];
                table[hash] = NULL;
                cout << "Element deleted from table index: " << hash << endl;
            }
        }

        ~HashTable(){
            for(int i=0;i<TABLE_SIZE;i++){
                delete table[i];
            }
            delete[] table;
            table = NULL;
        }
};

int main(){
    HashTable table;
    table.insert(2, 20);
    table.insert(130, 30);
    table.insert(150, 90);
    table.insert(5, 30);
    table.insert(5, 40);
    table.remove(130);
    table.remove(5);
    return 0;
}

**************************************
************* TASK 2(b) **************
**************************************

// Sufiyaan Usmani

#include <iostream>
#include <cmath>
#define TABLE_SIZE 1000
using namespace std;

class HashEntry{
    public:
        int key;
        int data;

        HashEntry(int key, int data){
            this->key = key;
            this->data = data;
        }
};

class HashTable{
    private:
        HashEntry **table;
    public:
        HashTable(){
            table = new HashEntry*[TABLE_SIZE];
            for(int i=0;i<TABLE_SIZE;i++){
                table[i] = NULL;
            }
        }

        int multiplicationHash(int v){
            return	floor (TABLE_SIZE * fmod((v * 0.618033), 1));
        }

        void insert(int key, int data){
            int hash = multiplicationHash(key);
            if(table[hash] != NULL){
                delete table[hash];
            }
            table[hash] = new HashEntry(key, data);
            cout << "Element inserted at table index: " << hash << endl;
        }

        int search(int key){
            int index = multiplicationHash(key);
            if(table[index] == NULL){
                return -1;
            }else{
                return table[index]->data;
            }
        }

        void remove(int key){
            int index = multiplicationHash(key);
            if(table[index] == NULL){
                cout << "Element not found" << endl;
            }else{
                cout << "Element deleted from table index: " << index << endl;
                delete table[index];
                table[index] = NULL;
            }
        }

        ~HashTable(){
            for(int i=0;i<TABLE_SIZE;i++){
                delete table[i];
            }
            delete[] table;
            table = NULL;
        }
};

int main(){
    HashTable table;
    table.insert(2, 20);
    table.insert(130, 30);
    table.insert(150, 90);
    table.insert(5, 40);
    table.remove(360);
    table.insert(6, 99);
    return 0;
}

**************************************
************* TASK 2(c) **************
**************************************

// Sufiyaan Usmani

#include <iostream>
#include <cmath>
#define TABLE_SIZE 1000
using namespace std;

class HashEntry{
    public:
        int key;
        int data;

        HashEntry(int key, int data){
            this->key = key;
            this->data = data;
        }
};

class HashTable{
    private:
        HashEntry **table;
    public:
        HashTable(){
            table = new HashEntry*[TABLE_SIZE];
            for(int i=0;i<TABLE_SIZE;i++){
                table[i] = NULL;
            }
        }

        int midSquareHash(int key){
            int x = key * key;

            if(x > 99 && x < 1000){
				return (x / 10) % 10 ;
			}else if(x>999 && x <100000){
				return  (x / 10) % 100 ;
			}else if(x>9999 && x <100000){
				return (x / 10) % 1000 ;
            }
        }

        void insert(int key, int data){
            int hash = midSquareHash(key);
            if(table[hash] != NULL){
                delete table[hash];
            }
            table[hash] = new HashEntry(key, data);
            cout << data << " inserted at table index: " << hash << endl;
        }

        int search(int key){
            int hash = midSquareHash(key);
            if(table[hash] == NULL || table[hash]->key != key){
                cout << "Not found" << endl;
                return -1;
            }else{
                cout << "Data: " << table[hash]->data << endl;
                return table[hash]->data;
            }
        }

        void remove(int key){
            int hash = midSquareHash(key);
            if(table[hash] == NULL || table[hash]->key != key){
                cout << "Element not found" << endl;
            }else{
                cout << "Element deleted from table index: " << hash << endl;
                delete table[hash];
                table[hash] = NULL;
            }
        }

        ~HashTable(){
            for(int i=0;i<TABLE_SIZE;i++){
                delete table[i];
            }
            delete[] table;
            table = NULL;
        }
};

int main(){
    HashTable table;
    table.insert(2, 20);
    table.insert(130, 30);
    table.insert(150, 90);
    table.insert(5, 40);
    table.remove(36);
    table.insert(130, 99);
    table.remove(150);
    return 0;
}

**************************************
************* TASK 2(d) **************
**************************************

// Sufiyaan Usmani

#include <iostream>
#include <cmath>
#define TABLE_SIZE 1000
using namespace std;

class HashEntry{
    public:
        int key;
        int data;

        HashEntry(int key, int data){
            this->key = key;
            this->data = data;
        }
};

class HashTable{
    private:
        HashEntry **table;
    public:
        HashTable(){
            table = new HashEntry*[TABLE_SIZE];
            for(int i=0;i<TABLE_SIZE;i++){
                table[i] = NULL;
            }
        }

        int foldingHash(int key){
            return(key % 300);
        }

        void insert(int key, int data){
            int hash = foldingHash(key);
            if(table[hash] != NULL){
                delete table[hash];
            }
            table[hash] = new HashEntry(key, data);
            cout << data << " inserted at table index: " << hash << endl;
        }

        int search(int key){
            int hash = foldingHash(key);
            if(table[hash] == NULL || table[hash]->key != key){
                cout << "Not found" << endl;
                return -1;
            }else{
                cout << "Data: " << table[hash]->data << endl;
                return table[hash]->data;
            }
        }

        void remove(int key){
            int hash = foldingHash(key);
            if(table[hash] == NULL || table[hash]->key != key){
                cout << "Element not found" << endl;
            }else{
                cout << "Element deleted from table index: " << hash << endl;
                delete table[hash];
                table[hash] = NULL;
            }
        }

        ~HashTable(){
            for(int i=0;i<TABLE_SIZE;i++){
                delete table[i];
            }
            delete[] table;
            table = NULL;
        }
};

int main(){
    HashTable table;
    table.insert(2, 20);
    table.insert(130, 30);
    table.insert(450, 90);
    table.insert(5, 40);
    table.remove(36);
    table.insert(130, 99);
    table.remove(450);
    return 0;
}

**************************************
************* TASK 2(e) **************
**************************************

// Sufiyaan Usmani

#include <iostream>
#include <cmath>
#define TABLE_SIZE 1000
using namespace std;

class HashEntry{
    public:
        int key;
        int data;

        HashEntry(int key, int data){
            this->key = key;
            this->data = data;
        }
};

class HashTable{
    private:
        HashEntry **table;
    public:
        HashTable(){
            table = new HashEntry*[TABLE_SIZE];
            for(int i=0;i<TABLE_SIZE;i++){
                table[i] = NULL;
            }
        }

        int radixHash(int key){
            return(key % 10000);
        }

        void insert(int key, int data){
            int hash = radixHash(key);
            if(table[hash] != NULL){
                delete table[hash];
            }
            table[hash] = new HashEntry(key, data);
            cout << data << " inserted at table index: " << hash << endl;
        }

        int search(int key){
            int hash = radixHash(key);
            if(table[hash] == NULL || table[hash]->key != key){
                cout << "Not found" << endl;
                return -1;
            }else{
                cout << "Data: " << table[hash]->data << endl;
                return table[hash]->data;
            }
        }

        void remove(int key){
            int hash = radixHash(key);
            if(table[hash] == NULL || table[hash]->key != key){
                cout << "Element not found" << endl;
            }else{
                cout << "Element deleted from table index: " << hash << endl;
                delete table[hash];
                table[hash] = NULL;
            }
        }

        ~HashTable(){
            for(int i=0;i<TABLE_SIZE;i++){
                delete table[i];
            }
            delete[] table;
            table = NULL;
        }
};

int main(){
    HashTable table;
    table.insert(2, 20);
    table.insert(130, 30);
    table.insert(450, 90);
    table.insert(5, 40);
    table.remove(36);
    table.insert(130, 99);
    table.remove(450);
    return 0;
}

**************************************
*************** TASK 3 ***************
**************************************

// Sufiyaan Usmani

#include <iostream>
#include <string>
#define SIZE 20
using namespace std;

class Contact{
    public:
        int ID;
        string contactNumber;

        Contact(int ID, string contactNumber){
            this->ID = ID;
            this->contactNumber = contactNumber;
        }
};

class ContactBook{
    private:
        Contact **book;
    public:
        ContactBook(){
            book = new Contact*[SIZE];
            for(int i=0;i<SIZE;i++){
                book[i] = NULL;
            }
        }

        bool isEmpty(){
            for(int i=0;i<SIZE;i++){
                if(book[i] != NULL){
                    return false;
                }
            }
            return true;
        }

        int getSize(){
            return SIZE;
        }

        int hashFunction(int i){
            return(i % SIZE);
        }

        int probe(int key){
            int i = 0;
            while(book[(hashFunction(key) + i) % SIZE] != NULL){
                i++;
            }
            return((hashFunction(key) + i) % SIZE);
        }

        void insert(int ID, string contactNumber){
            Contact *c = new Contact(ID, contactNumber);
            int hash = hashFunction(ID);
            if(book[hash] != NULL){
                hash = probe(hash);
            }
            book[hash] = c;
            cout << "Data inserted at index: " << hash << endl;
        }

        void search(int ID){
            int hash = hashFunction(ID);
            int i = 0;
            while((book[(hashFunction(ID) + i) % SIZE]->ID != ID) && (book[(hashFunction(ID) + i) % SIZE] != NULL)){
                i++;
            }
            if(book[(hashFunction(ID) + i) % SIZE] == NULL){
                cout << "Data not found" << endl;
            }else{
                cout << "ID: " << book[(hashFunction(ID) + i) % SIZE]->ID << endl;
                cout << "Contact Number: " << book[(hashFunction(ID) + i) % SIZE]->contactNumber << endl;
            }
        }

        void remove(int ID){
            int hash = hashFunction(ID);
            int i = 0;
            while((book[(hashFunction(ID) + i) % SIZE]->ID != ID) && (book[(hashFunction(ID) + i) % SIZE] != NULL)){
                i++;
            }
            if(book[(hashFunction(ID) + i) % SIZE] == NULL){
                cout << "Data not found" << endl;
            }else{
                delete book[(hashFunction(ID) + i) % SIZE];
                book[(hashFunction(ID) + i) % SIZE] = NULL;
                cout << "Deleted data at index: " << (hashFunction(ID) + i) % SIZE << endl;
            }
        }
};

int main(){
    ContactBook book;
    book.insert(3195, "03363778582");
    book.insert(15, "03312324234");
    book.remove(15);
    return 0;
}

**************************************
*************** TASK 4 ***************
**************************************

// Sufiyaan Usmani

#include <iostream>
#define SIZE 20
using namespace std;

class Contact{
    public:
        int ID;
        string contactNumber;
        Contact *next;

        Contact(int ID, string contactNumber){
            this->ID = ID;
            this->contactNumber = contactNumber;
            next = NULL;
        }
};

class ContactBook{
    private:
        Contact **book;
    public:
        ContactBook(){
            book = new Contact*[SIZE];
            for(int i=0;i<SIZE;i++){
                book[i] = NULL;
            }
        }

        bool isEmpty(){
            for(int i=0;i<SIZE;i++){
                if(book[i] != NULL){
                    return false;
                }
            }
            return true;
        }

        int getSize(){
            return SIZE;
        }

        int hashFunction(int i){
            return(i % SIZE);
        }

        void insert(int ID, string contactNumber){
            Contact *c = new Contact(ID, contactNumber);
            int hash = hashFunction(ID);
            if(book[hash] == NULL){
                book[hash] = c;
            }else{
                Contact *temp = book[hash];
                while(temp->next != NULL){
                    temp = temp->next;
                }
                temp->next = c;
            }
            cout << "Contact added successfully at index: " << hash << endl;
        }

        void remove(int ID){
            int hash = hashFunction(ID);
            if(book[hash] == NULL){
                cout << "Contact not found" << endl;
            }else{
                if(book[hash]->ID == ID){
                    Contact *temp = book[hash];
                    Contact *next = book[hash]->next;
                    delete temp;
                    book[hash] = next;
                    cout << "Contact deleted successfully" << endl;
                }else{
                    Contact *temp = book[hash];
                    Contact *prev = NULL;
                    while(temp != NULL){
                        if(temp->ID == ID){
                            break;
                        }
                        prev = temp;
                        temp = temp->next;
                    }
                    if(temp == NULL){
                        cout << "Contact not found" << endl;
                    }else{
                        prev->next = temp->next;
                        delete temp;
                        cout << "Contact deleted successfully" << endl;
                    }
                }
            }
        }

        void search(int ID){
            int hash = hashFunction(ID);
            if(book[hash] == NULL){
                cout << "Not found" << endl;
                return;
            }else{
                Contact *temp = book[hash];
                while(temp != NULL){
                    if(temp->ID == ID){
                        cout << "ID: " << ID << endl;
                        cout << "Contact Number: " << temp->contactNumber << endl;
                        return;
                    }
                    temp = temp->next;
                }
            }
            cout << "Data not found" << endl;
        }
};

int main(){
    ContactBook book;
    book.insert(23, "03054354");
    book.insert(33, "03034522");
    book.insert(43, "03076666");
    book.remove(33);
    book.search(43);
    return 0;
}