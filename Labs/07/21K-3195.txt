**************************************
*************** TASK 1 ***************
**************************************


// Sufiyaan Usmani
// 21K-3195
// BCS-3J
// Task 1

#include <iostream>
using namespace std;

int getMax(int arr[], int n)
{
	int max = arr[0];
	for (int i = 1; i < n; i++)
	{
		if (arr[i] > max)
		{
			max = arr[i];
		}
	}
	return max;
}

void merge(int arr[], int l, int m, int h, int max)
{
	int a = l;
	int b = m + 1;
	int c = l;

	while (a <= m && b <= h)
	{
		if ((arr[a] % max) <= (arr[b] % max))
		{
			arr[c] += ((arr[a] % max) * max);
			a++;
			c++;
		}
		else
		{
			arr[c] += ((arr[b] % max) * max);
			b++;
			c++;
		}
	}

	for (; a <= m; a++)
	{
		arr[c] += ((arr[a] % max) * max);
		c++;
	}

	for (; b <= h; b++)
	{
		arr[c] += ((arr[b] % max) * max);
		c++;
	}

	for (int i = l; i <= h; i++)
	{
		arr[i] /= max;
	}
}

void mergeSort(int arr[], int l, int h, int max)
{
	if (l < h)
	{
		int mid = (l + h) / 2;
		mergeSort(arr, l, mid, max);
		mergeSort(arr, mid + 1, h, max);
		merge(arr, l, mid, h, max);
	}
}

void print(int arr[], int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << "  ";
	}
	cout << endl;
}

int main()
{
	int size, max;

	// array 1
	int arr1[] = {5, 4, 3, 2, 1};
	cout << "Before Sorting: ";
	size = sizeof(arr1) / sizeof(arr1[0]);
	max = getMax(arr1, size) + 1;
	print(arr1, size);
	mergeSort(arr1, 0, size - 1, max);
	cout << "After Sorting: ";
	print(arr1, size);

	cout << "\n----------------------------------\n";

	// array 2
	int arr2[] = {999, 612, 589, 856, 56, 945, 243};
	cout << "Before Sorting: ";
	size = sizeof(arr2) / sizeof(arr2[0]);
	max = getMax(arr2, size) + 1;
	print(arr2, size);
	mergeSort(arr2, 0, size - 1, max);
	cout << "After Sorting: ";
	print(arr2, size);
	return 0;
}


**************************************
*************** TASK 2 ***************
**************************************


// Sufiyaan Usmani
// 21K-3195
// BCS-3J
// Task 2

#include <iostream>
using namespace std;

int partition(int arr[], int l, int h)
{
	int pIndex = (l + h) / 2; // using pivot as middle
	int pivot = arr[pIndex];
	int temp;
	int i = l;
	int j = h;

	while (i <= j)
	{
		while (arr[i] < pivot)
		{
			i++;
		}

		while (arr[j] > pivot)
		{
			j--;
		}

		if (i <= j)
		{
			temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
			i++;
			j--;
		}
	}
	return i;
}

void quickSort(int arr[], int l, int h)
{
	int partitionIndex;
	if (l < h)
	{
		partitionIndex = partition(arr, l, h);
		quickSort(arr, l, partitionIndex - 1);
		quickSort(arr, partitionIndex + 1, h);
	}
}

void print(int arr[], int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << "  ";
	}
	cout << endl;
}

int main()
{
	int size;

	// array 1
	int arr1[] = {5, 4, 3, 2, 1};
	cout << "Before Sorting: ";
	size = sizeof(arr1) / sizeof(arr1[0]);
	print(arr1, size);
	quickSort(arr1, 0, size - 1);
	cout << "After Sorting : ";
	print(arr1, size);

	cout << "\n----------------------------------\n";

	// array 2
	int arr2[] = {999, 612, 589, 856, 56, 945, 243};
	cout << "Before Sorting: ";
	size = sizeof(arr2) / sizeof(arr2[0]);
	print(arr2, size);
	quickSort(arr2, 0, size - 1);
	cout << "After Sorting : ";
	print(arr2, size);
	return 0;
}


**************************************
*************** TASK 3 ***************
**************************************


// Sufiyaan Usmani
// 21K-3195
// BCS-3J
// Task 3

#include <iostream>
using namespace std;

int getMax(int arr[], int n)
{
    int max = arr[0];
    for (int i = 1; i < n; i++)
    {
        if (arr[i] > max)
        {
            max = arr[i];
        }
    }
    return max;
}

void countSort(int arr[], int n, int exp, int type)
{
    // if type == 0, then array will be sorted in ascending order
    // if type == 1, then array will be sorted in descending order
    int *temp = new int[n];
    int count[10];
    int i;

    for (i = 0; i < 10; i++)
    {
        count[i] = 0;
    }

    for (i = 0; i < n; i++)
    {
        count[(arr[i] / exp) % 10]++;
    }

    for (i = 1; i < 10; i++)
    {
        count[i] += count[i - 1];
    }

    for (i = n - 1; i >= 0; i--)
    {
        temp[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    if (type == 0)
    {
        // sorting in ascending order
        for (int i = 0; i < n; i++)
        {
            arr[i] = temp[i];
        }
    }
    else
    {
        // sorting in descending order
        for (int i = 0; i < n; i++)
        {
            arr[i] = temp[n - 1 - i];
        }
    }
    delete[] temp;
}

void radixSort(int arr[], int n, int type)
{
    int max = getMax(arr, n);

    for (int exp = 1; max / exp > 0; exp *= 10)
    {
        countSort(arr, n, exp, type);
    }
}

void print(int arr[], int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << "  ";
    }
    cout << endl;
}

int main()
{
    // Using flag to sort either ascending or descending
    // 0: ascending
    // 1: descending
    int size;

    // array 1
    int arr1[] = {5, 4, 3, 2, 1};
    cout << "Before Sorting: ";
    size = sizeof(arr1) / sizeof(arr1[0]);
    print(arr1, size);
    radixSort(arr1, size, 0);
    cout << "After Sorting (Ascending) : ";
    print(arr1, size);

    int arr2[] = {5, 4, 3, 2, 1}; // using the same array, but this time sorting in descending order
    // although it is not necessary to make another array with the same values because array will still be sorted but i have shown it twice to make things clear
    size = sizeof(arr2) / sizeof(arr2[0]);
    radixSort(arr2, size, 1);
    cout << "After Sorting (Descending): ";
    print(arr2, size);

    cout << "\n----------------------------------\n\n";

    // array 2
    int arr3[] = {999, 612, 589, 856, 56, 945, 243};
    cout << "Before Sorting: ";
    size = sizeof(arr3) / sizeof(arr3[0]);
    print(arr3, size);
    radixSort(arr3, size, 0);
    cout << "After Sorting (Ascending) : ";
    print(arr3, size);

    int arr4[] = {999, 612, 589, 856, 56, 945, 243};
    size = sizeof(arr4) / sizeof(arr4[0]);
    radixSort(arr4, size, 1);
    cout << "After Sorting (Descending): ";
    print(arr4, size);

    return 0;
}



**************************************
*************** TASK 4 ***************
**************************************


// Sufiyaan Usmani
// 21K-3195
// BCS-3J
// Task 4

#include <iostream>
#include <string>
using namespace std;

void combSort(int arr[], int size, int type)
{
	// if type == 0, then array will be sorted in ascending order
	// if type == 1, then array will be sorted in descending order
	int temp, gap;
	gap = size;
	bool isSwapped = true;

	while (gap != 1 || isSwapped == true)
	{
		gap = (int)(gap / 1.3);
		if (gap <= 1)
		{
			// when gap equals 1, this algorithm works like bubble sort
			gap = 1;
		}
		isSwapped = false;
		for (int i = 0; i < size - gap; i++)
		{
			// for ascending sort
			if (type == 0)
			{
				if (arr[i] > arr[i + gap])
				{
					temp = arr[i];
					arr[i] = arr[i + gap];
					arr[i + gap] = temp;
					isSwapped = true;
				}
			}
			else
			{
				// for descending sort
				if (arr[i] < arr[i + gap])
				{
					swap(arr[i], arr[i + gap]);
					isSwapped = true;
				}
			}
		}
	}
}

void print(int arr[], int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << "  ";
	}
	cout << endl;
}

int main()
{
	// Using flag to sort either ascending or descending
	// 0: ascending
	// 1: descending
	int size;

	int arr1[] = {20, 4, 6, 18, 10};
	size = sizeof(arr1) / sizeof(arr1[0]);
	cout << "Before Sorting: ";
	print(arr1, size);

	combSort(arr1, size, 0);
	cout << "\nAfter Sorting (Ascending) : ";
	print(arr1, size);

	cout << "After Sorting (Descending): ";
	combSort(arr1, size, 1);
	print(arr1, size);

	return 0;
}



**************************************
*************** TASK 5 ***************
**************************************


// Sufiyaan Usmani
// 21K-3195
// BCS-3J
// Task 5

#include <iostream>
using namespace std;

int binarySearch(int arr[], int data, int left, int right, int &count)
{
	// count is used to record number of iterations
	bool found = false;
	int mid;
	while (left <= right)
	{
		count++;
		mid = left + (right - left) / 2;
		if (arr[mid] == data)
		{
			found = true;
			break;
		}
		else if (data > arr[mid])
		{
			left = mid + 1;
		}
		else
		{
			right = mid - 1;
		}
	}
	if (found == true)
	{
		return mid;
	}
	else
	{
		return -1;
	}
}

int interpolationSearch(int arr[], int size, int data, int &count)
{
	int l, h, index, temp;
	l = 0;
	h = size - 1;
	bool found = false;

	while (l <= h && data >= arr[l] && data <= arr[h])
	{
		count++;
		temp = (data - arr[l]) / (arr[h] - arr[l]);
		index = l + (h - l) * temp;

		if (arr[index] == data)
		{
			found = true;
			break;
		}

		if (data < arr[index])
		{
			h = index - 1;
		}
		else
		{
			l = index + 1;
		}
	}

	if (found == true)
	{
		return index;
	}
	else
	{
		return -1;
	}
}

int main()
{
	// this program will first ask user for data to search
	// and will then print the index of that data
	// and will also tell number of iterations for each algorithm
	int data, index, size, count;
	int arr[] = {0, 4, 8, 12, 16, 20, 24, 28, 32, 36};
	size = sizeof(arr) / sizeof(arr[0]);

	cout << "Enter data to search: ";
	cin >> data;

	cout << "----- Binary Search -----" << endl;
	count = 0;
	index = binarySearch(arr, data, 0, size - 1, count);
	if (index != -1)
	{
		cout << "Data found at index " << index << endl;
		cout << "Number of iterations: " << count << endl;
	}
	else
	{
		cout << "Data not found" << endl;
	}

	cout << "\n----- Interpolation Search -----" << endl;
	count = 0;
	index = interpolationSearch(arr, size, data, count);
	if (index != -1)
	{
		cout << "Data found at index " << index << endl;
		cout << "Number of iterations: " << count << endl;
	}
	else
	{
		cout << "Data not found" << endl;
	}
	return 0;
}
